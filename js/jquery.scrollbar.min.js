/**
 * jQuery CSS Customizable Scrollbar
 *
 * Copyright 2014, Yuriy Khabarov
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 * If you found bug, please contact me via email <13real008@gmail.com>
 *
 * @author Yuriy Khabarov aka Gromo
 * @version 0.2.5
 * @url https://github.com/gromo/jquery.scrollbar/
 *
 */
!function (l, r, o) { "use strict"; function s(r) { if (d.webkit && !r) return { height: 0, width: 0 }; if (!d.data.outer) { var o = { border: "none", "box-sizing": "content-box", height: "200px", margin: "0", padding: "0", width: "200px" }; d.data.inner = l("<div>").css(l.extend({}, o)), d.data.outer = l("<div>").css(l.extend({ left: "-1000px", overflow: "scroll", position: "absolute", top: "-1000px" }, o)).append(d.data.inner).appendTo("body") } return d.data.outer.scrollLeft(1e3).scrollTop(1e3), { height: Math.ceil(d.data.outer.offset().top - d.data.inner.offset().top || 0), width: Math.ceil(d.data.outer.offset().left - d.data.inner.offset().left || 0)} } function e(o, s) { return l(r).on({ "blur.scrollbar": function () { l(r).add("body").off(".scrollbar"), o && o() }, "dragstart.scrollbar": function (l) { return l.preventDefault(), !1 }, "mouseup.scrollbar": function () { l(r).add("body").off(".scrollbar"), o && o() } }), l("body").on({ "selectstart.scrollbar": function (l) { return l.preventDefault(), !1 } }), s && s.preventDefault(), !1 } function t() { var l = s(!0); return !(l.height || l.width) } function i(l) { var r = l.originalEvent; return r.axis && r.axis === r.HORIZONTAL_AXIS ? !1 : r.wheelDeltaX ? !1 : !0 } var c = !1, a = 1, n = "px", d = { data: {}, macosx: -1 !== o.navigator.platform.toLowerCase().indexOf("mac"), mobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(o.navigator.userAgent), overlay: null, scroll: null, scrolls: [], webkit: /WebKit/.test(o.navigator.userAgent), log: c ? function (r, s) { var e = r; s && "string" != typeof r && (e = [], l.each(r, function (l, r) { e.push('"' + l + '": ' + r) }), e = e.join(", ")), o.console && o.console.log ? o.console.log(e) : alert(e) } : function () { } }, f = { autoScrollSize: !0, autoUpdate: !0, debug: !1, disableBodyScroll: !1, duration: 200, ignoreMobile: !0, ignoreOverlay: !0, scrollStep: 30, showArrows: !1, stepScrolling: !0, type: "simple", scrollx: null, scrolly: null, onDestroy: null, onInit: null, onScroll: null, onUpdate: null }, p = function (r, e) { d.scroll || (d.log("Init jQuery Scrollbar v0.2.5"), d.overlay = t(), d.scroll = s(), v(), l(o).resize(function () { var l = !1; if (d.scroll && (d.scroll.height || d.scroll.width)) { var r = s(); (r.height != d.scroll.height || r.width != d.scroll.width) && (d.scroll = r, l = !0) } v(l) })), this.container = r, this.options = l.extend({}, f, o.jQueryScrollbarOptions || {}), this.scrollTo = null, this.scrollx = {}, this.scrolly = {}, this.init(e) }; p.prototype = { destroy: function () { if (this.wrapper) { var o = this.container.scrollLeft(), s = this.container.scrollTop(); this.container.insertBefore(this.wrapper).css({ height: "", margin: "" }).removeClass("scroll-content").removeClass("scroll-scrollx_visible").removeClass("scroll-scrolly_visible").off(".scrollbar").scrollLeft(o).scrollTop(s), this.scrollx.scrollbar.removeClass("scroll-scrollx_visible").find("div").andSelf().off(".scrollbar"), this.scrolly.scrollbar.removeClass("scroll-scrolly_visible").find("div").andSelf().off(".scrollbar"), this.wrapper.remove(), l(r).add("body").off(".scrollbar"), l.isFunction(this.options.onDestroy) && this.options.onDestroy.apply(this, [this.container]) } }, getScrollbar: function (r) { var o = this.options["scroll" + r], s = { advanced: '<div class="scroll-element_corner"></div><div class="scroll-arrow scroll-arrow_less"></div><div class="scroll-arrow scroll-arrow_more"></div><div class="scroll-element_outer">    <div class="scroll-element_size"></div>    <div class="scroll-element_inner-wrapper">        <div class="scroll-element_inner scroll-element_track">            <div class="scroll-element_inner-bottom"></div>        </div>    </div>    <div class="scroll-bar">        <div class="scroll-bar_body">            <div class="scroll-bar_body-inner"></div>        </div>        <div class="scroll-bar_bottom"></div>        <div class="scroll-bar_center"></div>    </div></div>', simple: '<div class="scroll-element_outer">    <div class="scroll-element_size"></div>    <div class="scroll-element_track"></div>    <div class="scroll-bar"></div></div>' }, e = s[this.options.type] ? this.options.type : "advanced"; return o = o ? "string" == typeof o ? l(o).appendTo(this.wrapper) : l(o) : l("<div>").addClass("scroll-element").html(s[e]).appendTo(this.wrapper), this.options.showArrows && o.addClass("scroll-element_arrows_visible"), o.addClass("scroll-" + r) }, init: function (o) { var s = this, t = this.container, c = this.containerWrapper || t, f = l.extend(this.options, o || {}), p = { x: this.scrollx, y: this.scrolly }, u = this.wrapper, h = { scrollLeft: t.scrollLeft(), scrollTop: t.scrollTop() }; if (d.mobile && f.ignoreMobile || d.overlay && f.ignoreOverlay || d.macosx && !d.webkit) return t.addClass("scroll-disabled"), !1; if (u) c.css({ height: "", "margin-bottom": -1 * d.scroll.height + n, "margin-right": -1 * d.scroll.width + n }); else { if (this.wrapper = u = l("<div>").addClass("scroll-wrapper").addClass(t.attr("class")).css("position", "absolute" == t.css("position") ? "absolute" : "relative").insertBefore(t).append(t), t.is("textarea") && (this.containerWrapper = c = l("<div>").insertBefore(t).append(t), u.addClass("scroll-textarea")), c.addClass("scroll-content").css({ height: "", "margin-bottom": -1 * d.scroll.height + n, "margin-right": -1 * d.scroll.width + n }), t.on("scroll.scrollbar", function (r) { l.isFunction(f.onScroll) && f.onScroll.call(s, { maxScroll: p.y.maxScrollOffset, scroll: t.scrollTop(), size: p.y.size, visible: p.y.visible }, { maxScroll: p.x.maxScrollOffset, scroll: t.scrollLeft(), size: p.x.size, visible: p.x.visible }), p.x.isVisible && p.x.scroller.css("left", t.scrollLeft() * p.x.kx + n), p.y.isVisible && p.y.scroller.css("top", t.scrollTop() * p.y.kx + n) }), u.on("scroll", function () { u.scrollTop(0).scrollLeft(0) }), f.disableBodyScroll) { var v = function (l) { i(l) ? p.y.isVisible && p.y.mousewheel(l) : p.x.isVisible && p.x.mousewheel(l) }; u.on({ "MozMousePixelScroll.scrollbar": v, "mousewheel.scrollbar": v }), d.mobile && u.on("touchstart.scrollbar", function (o) { var s = o.originalEvent.touches && o.originalEvent.touches[0] || o, e = { pageX: s.pageX, pageY: s.pageY }, i = { left: t.scrollLeft(), top: t.scrollTop() }; l(r).on({ "touchmove.scrollbar": function (l) { var r = l.originalEvent.targetTouches && l.originalEvent.targetTouches[0] || l; t.scrollLeft(i.left + e.pageX - r.pageX), t.scrollTop(i.top + e.pageY - r.pageY), l.preventDefault() }, "touchend.scrollbar": function () { l(r).off(".scrollbar") } }) }) } l.isFunction(f.onInit) && f.onInit.apply(this, [t]) } l.each(p, function (o, c) { var n = null, d = 1, u = "x" == o ? "scrollLeft" : "scrollTop", h = f.scrollStep, v = function () { var l = t[u](); t[u](l + h), 1 == d && l + h >= b && (l = t[u]()), -1 == d && b >= l + h && (l = t[u]()), t[u]() == l && n && n() }, b = 0; c.scrollbar || (c.scrollbar = s.getScrollbar(o), c.scroller = c.scrollbar.find(".scroll-bar"), c.mousewheel = function (l) { if (!c.isVisible || "x" == o && i(l)) return !0; if ("y" == o && !i(l)) return p.x.mousewheel(l), !0; var r = -1 * l.originalEvent.wheelDelta || l.originalEvent.detail, e = c.size - c.visible - c.offset; return 0 >= b && 0 > r || b >= e && r > 0 || (b += r, 0 > b && (b = 0), b > e && (b = e), s.scrollTo = s.scrollTo || {}, s.scrollTo[u] = b, setTimeout(function () { s.scrollTo && (t.stop().animate(s.scrollTo, 240, "linear", function () { b = t[u]() }), s.scrollTo = null) }, 1)), l.preventDefault(), !1 }, c.scrollbar.on({ "MozMousePixelScroll.scrollbar": c.mousewheel, "mousewheel.scrollbar": c.mousewheel, "mouseenter.scrollbar": function () { b = t[u]() } }), c.scrollbar.find(".scroll-arrow, .scroll-element_track").on("mousedown.scrollbar", function (r) { if (r.which != a) return !0; d = 1; var i = { eventOffset: r["x" == o ? "pageX" : "pageY"], maxScrollValue: c.size - c.visible - c.offset, scrollbarOffset: c.scroller.offset()["x" == o ? "left" : "top"], scrollbarSize: c.scroller["x" == o ? "outerWidth" : "outerHeight"]() }, p = 0, g = 0; return l(this).hasClass("scroll-arrow") ? (d = l(this).hasClass("scroll-arrow_more") ? 1 : -1, h = f.scrollStep * d, b = d > 0 ? i.maxScrollValue : 0) : (d = i.eventOffset > i.scrollbarOffset + i.scrollbarSize ? 1 : i.eventOffset < i.scrollbarOffset ? -1 : 0, h = Math.round(.75 * c.visible) * d, b = i.eventOffset - i.scrollbarOffset - (f.stepScrolling ? 1 == d ? i.scrollbarSize : 0 : Math.round(i.scrollbarSize / 2)), b = t[u]() + b / c.kx), s.scrollTo = s.scrollTo || {}, s.scrollTo[u] = f.stepScrolling ? t[u]() + h : b, f.stepScrolling && (n = function () { b = t[u](), clearInterval(g), clearTimeout(p), p = 0, g = 0 }, p = setTimeout(function () { g = setInterval(v, 40) }, f.duration + 100)), setTimeout(function () { s.scrollTo && (t.animate(s.scrollTo, f.duration), s.scrollTo = null) }, 1), e(n, r) }), c.scroller.on("mousedown.scrollbar", function (s) { if (s.which != a) return !0; var i = s["x" == o ? "pageX" : "pageY"], n = t[u](); return c.scrollbar.addClass("scroll-draggable"), l(r).on("mousemove.scrollbar", function (l) { var r = parseInt((l["x" == o ? "pageX" : "pageY"] - i) / c.kx, 10); t[u](n + r) }), e(function () { c.scrollbar.removeClass("scroll-draggable"), b = t[u]() }, s) })) }), l.each(p, function (l, r) { var o = "scroll-scroll" + l + "_visible", s = "x" == l ? p.y : p.x; r.scrollbar.removeClass(o), s.scrollbar.removeClass(o), c.removeClass(o) }), l.each(p, function (r, o) { l.extend(o, "x" == r ? { offset: parseInt(t.css("left"), 10) || 0, size: t.prop("scrollWidth"), visible: u.width()} : { offset: parseInt(t.css("top"), 10) || 0, size: t.prop("scrollHeight"), visible: u.height() }) }); var b = function (r, o) { var s = "scroll-scroll" + r + "_visible", e = "x" == r ? p.y : p.x, i = parseInt(t.css("x" == r ? "left" : "top"), 10) || 0, a = o.size, f = o.visible + i; o.isVisible = a - f > 1, o.isVisible ? (o.scrollbar.addClass(s), e.scrollbar.addClass(s), c.addClass(s)) : (o.scrollbar.removeClass(s), e.scrollbar.removeClass(s), c.removeClass(s)), "y" == r && (o.isVisible || o.size < o.visible) && c.css("height", f + d.scroll.height + n), (p.x.size != t.prop("scrollWidth") || p.y.size != t.prop("scrollHeight") || p.x.visible != u.width() || p.y.visible != u.height() || p.x.offset != (parseInt(t.css("left"), 10) || 0) || p.y.offset != (parseInt(t.css("top"), 10) || 0)) && (l.each(p, function (r, o) { l.extend(o, "x" == r ? { offset: parseInt(t.css("left"), 10) || 0, size: t.prop("scrollWidth"), visible: u.width()} : { offset: parseInt(t.css("top"), 10) || 0, size: t.prop("scrollHeight"), visible: u.height() }) }), b("x" == r ? "y" : "x", e)) }; l.each(p, b), l.isFunction(f.onUpdate) && f.onUpdate.apply(this, [t]), l.each(p, function (l, r) { var o = "x" == l ? "left" : "top", s = "x" == l ? "outerWidth" : "outerHeight", e = "x" == l ? "width" : "height", i = parseInt(t.css(o), 10) || 0, c = r.size, a = r.visible + i, d = r.scrollbar.find(".scroll-element_size"); d = d[s]() + (parseInt(d.css(o), 10) || 0), f.autoScrollSize && (r.scrollbarSize = parseInt(d * a / c, 10), r.scroller.css(e, r.scrollbarSize + n)), r.scrollbarSize = r.scroller[s](), r.kx = (d - r.scrollbarSize) / (c - a) || 1, r.maxScrollOffset = c - a }), t.scrollLeft(h.scrollLeft).scrollTop(h.scrollTop).trigger("scroll") } }, l.fn.scrollbar = function (r, o) { var s = this; return "get" === r && (s = null), this.each(function () { var e = l(this); if (e.hasClass("scroll-wrapper") || "body" == e.get(0).nodeName) return !0; var t = e.data("scrollbar"); if (t) { if ("get" === r) return s = t, !1; var i = "string" == typeof r && t[r] ? r : "init"; if (t[i].apply(t, l.isArray(o) ? o : []), "destroy" === r) for (e.removeData("scrollbar"); l.inArray(t, d.scrolls) >= 0; ) d.scrolls.splice(l.inArray(t, d.scrolls), 1) } else "string" != typeof r && (t = new p(e, r), e.data("scrollbar", t), d.scrolls.push(t)); return !0 }), s }, l.fn.scrollbar.options = f, o.angular && !function (l) { var r = l.module("jQueryScrollbar", []); r.directive("jqueryScrollbar", function () { return { link: function (l, r) { r.scrollbar(l.options).on("$destroy", function () { r.scrollbar("destroy") }) }, restring: "AC", scope: { options: "=jqueryScrollbar"}} }) } (o.angular); var u = 0, h = 0, v = function (l) { var r, o, s, e, t, i, a; for (r = 0; r < d.scrolls.length; r++) e = d.scrolls[r], o = e.container, s = e.options, t = e.wrapper, i = e.scrollx, a = e.scrolly, (l || s.autoUpdate && t && t.is(":visible") && (o.prop("scrollWidth") != i.size || o.prop("scrollHeight") != a.size || t.width() != i.visible || t.height() != a.visible)) && (e.init(), c && (d.log({ scrollHeight: o.prop("scrollHeight") + ":" + e.scrolly.size, scrollWidth: o.prop("scrollWidth") + ":" + e.scrollx.size, visibleHeight: t.height() + ":" + e.scrolly.visible, visibleWidth: t.width() + ":" + e.scrollx.visible }, !0), h++)); c && h > 10 ? (d.log("Scroll updates exceed 10"), v = function () { }) : (clearTimeout(u), u = setTimeout(v, 300)) } } (jQuery, document, window);